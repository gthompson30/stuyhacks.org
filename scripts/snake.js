var past = [];
var tracking = false;
var snake;

var img;

function setup() {
	let canvas = createCanvas(1000, 510);
	canvas.parent("animation");
	fill(0);
	
	snake = new Snake();
}

function draw() {
	background(0);
	snake.display();
}

function mouseMoved() {
	snake.addLine(mouseX, mouseY);
}

function mouseClicked() {
	tracking = !tracking;
}

function print2DArray(a) {
	var out = "[";
	
	for (var i = 0; i < a.length; i++) {
		out += "[" + a[i][0] + ", " + a[i][1] + "], ";
	}
	
	console.log(out + "]");
}

class Snake {
	
	constructor() {
		this.length = 575;
		// sets the snake's default position, as generated by https://openprocessing.org/sketch/1420547 and some python
		this.past = [[394.15999999999997, 538.0], [393.32, 538.0], [392.48, 538.0], [391.64, 538.0], [390.8, 538.0], [389.96, 538.0], [389.12, 538.0], [388.28, 538.0], [387.44, 538.0], [386.6, 538.0], [385.76, 538.0], [384.92, 538.0], [384.08, 538.0], [383.24, 538.0], [382.4, 538.0], [381.56, 538.0], [380.72, 538.0], [379.88, 538.0], [379.04, 538.0], [378.2, 538.0], [377.36, 538.0], [376.52, 538.0], [375.68, 538.0], [374.84000000000003, 538.0], [374.0, 538.0], [373.15999999999997, 537.2], [372.32, 536.4], [371.48, 535.6], [370.64, 534.8], [369.8, 534.0], [368.96, 533.2], [368.12, 532.4], [367.28, 531.6], [366.44, 530.8], [365.6, 530.0], [364.76, 529.2], [363.92, 528.4], [363.08, 527.6], [362.24, 526.8], [361.4, 526.0], [360.56, 525.2], [359.72, 524.4], [358.88, 523.6], [358.04, 522.8], [357.2, 522.0], [356.36, 521.2], [355.52, 520.4], [354.68, 519.6], [353.84000000000003, 518.8], [353.0, 518.0], [354.12, 517.2], [355.24, 516.4], [356.36, 515.6], [357.48, 514.8], [358.6, 514.0], [359.72, 513.2], [360.84, 512.4], [361.96, 511.6], [363.08, 510.8], [364.2, 510.0], [365.32, 509.2], [366.44, 508.4], [367.56, 507.6], [368.68, 506.8], [369.8, 506.0], [370.92, 505.2], [372.03999999999996, 504.4], [373.15999999999997, 503.6], [374.28, 502.8], [375.4, 502.0], [376.52, 501.2], [377.64, 500.4], [378.76, 499.6], [379.88, 498.8], [381.0, 498.0], [381.72, 496.8], [382.44, 495.6], [383.15999999999997, 494.4], [383.88, 493.2], [384.6, 492.0], [385.32, 490.8], [386.04, 489.6], [386.76, 488.4], [387.48, 487.2], [388.2, 486.0], [388.92, 484.8], [389.64, 483.6], [390.36, 482.4], [391.08, 481.2], [391.8, 480.0], [392.52, 478.8], [393.24, 477.6], [393.96, 476.4], [394.68, 475.2], [395.4, 474.0], [396.12, 472.8], [396.84000000000003, 471.6], [397.56, 470.4], [398.28, 469.2], [399.0, 468.0], [398.28, 467.0], [397.56, 466.0], [396.84000000000003, 465.0], [396.12, 464.0], [395.4, 463.0], [394.68, 462.0], [393.96, 461.0], [393.24, 460.0], [392.52, 459.0], [391.8, 458.0], [391.08, 457.0], [390.36, 456.0], [389.64, 455.0], [388.92, 454.0], [388.2, 453.0], [387.48, 452.0], [386.76, 451.0], [386.04, 450.0], [385.32, 449.0], [384.6, 448.0], [383.88, 447.0], [383.15999999999997, 446.0], [382.44, 445.0], [381.72, 444.0], [381.0, 443.0], [379.8, 442.12], [378.6, 441.24], [377.4, 440.36], [376.2, 439.48], [375.0, 438.6], [373.8, 437.72], [372.6, 436.84], [371.4, 435.96], [370.2, 435.08], [369.0, 434.2], [367.8, 433.32], [366.6, 432.44], [365.4, 431.56], [364.2, 430.68], [363.0, 429.8], [361.8, 428.92], [360.6, 428.04], [359.4, 427.16], [358.2, 426.28], [357.0, 425.4], [355.8, 424.52], [354.6, 423.64], [353.4, 422.76], [352.2, 421.88], [351.0, 421.0], [351.24, 419.48], [351.48, 417.96], [351.72, 416.44], [351.96, 414.92], [352.2, 413.4], [352.44, 411.88], [352.68, 410.36], [352.92, 408.84], [353.15999999999997, 407.32], [353.4, 405.8], [353.64, 404.28], [353.88, 402.76], [354.12, 401.24], [354.36, 399.72], [354.6, 398.2], [354.84000000000003, 396.68], [355.08, 395.16], [355.32, 393.64], [355.56, 392.12], [355.8, 390.6], [356.04, 389.08], [356.28, 387.56], [356.52, 386.04], [356.76, 384.52], [357.0, 383.0], [358.48, 382.28], [359.96, 381.56], [361.44, 380.84], [362.92, 380.12], [364.4, 379.4], [365.88, 378.68], [367.36, 377.96], [368.84000000000003, 377.24], [370.32, 376.52], [371.8, 375.8], [373.28, 375.08], [374.76, 374.36], [376.24, 373.64], [377.72, 372.92], [379.2, 372.2], [380.68, 371.48], [382.15999999999997, 370.76], [383.64, 370.04], [385.12, 369.32], [386.6, 368.6], [388.08, 367.88], [389.56, 367.16], [391.04, 366.44], [392.52, 365.72], [394.0, 365.0], [395.88, 364.96], [397.76, 364.92], [399.64, 364.88], [401.52, 364.84], [403.4, 364.8], [405.28, 364.76], [407.15999999999997, 364.72], [409.04, 364.68], [410.92, 364.64], [412.8, 364.6], [414.68, 364.56], [416.56, 364.52], [418.44, 364.48], [420.32, 364.44], [422.2, 364.4], [424.08, 364.36], [425.96000000000004, 364.32], [427.84000000000003, 364.28], [429.72, 364.24], [431.6, 364.2], [433.48, 364.16], [435.36, 364.12], [437.24, 364.08], [439.12, 364.04], [441.0, 364.0], [442.68, 364.24], [444.36, 364.48], [446.03999999999996, 364.72], [447.72, 364.96], [449.4, 365.2], [451.08000000000004, 365.44], [452.76, 365.68], [454.44, 365.92], [456.12, 366.16], [457.8, 366.4], [459.48, 366.64], [461.15999999999997, 366.88], [462.84000000000003, 367.12], [464.52, 367.36], [466.2, 367.6], [467.88, 367.84], [469.56, 368.08], [471.24, 368.32], [472.91999999999996, 368.56], [474.6, 368.8], [476.28, 369.04], [477.96000000000004, 369.28], [479.64, 369.52], [481.32, 369.76], [483.0, 370.0], [484.72, 369.2], [486.44, 368.4], [488.15999999999997, 367.6], [489.88, 366.8], [491.6, 366.0], [493.32, 365.2], [495.03999999999996, 364.4], [496.76, 363.6], [498.48, 362.8], [500.2, 362.0], [501.92, 361.2], [503.64, 360.4], [505.36, 359.6], [507.08000000000004, 358.8], [508.8, 358.0], [510.52, 357.2], [512.24, 356.4], [513.96, 355.6], [515.6800000000001, 354.8], [517.4, 354.0], [519.12, 353.2], [520.84, 352.4], [522.56, 351.6], [524.28, 350.8], [526.0, 350.0], [525.88, 348.48], [525.76, 346.96], [525.64, 345.44], [525.52, 343.91999999999996], [525.4, 342.4], [525.28, 340.88], [525.16, 339.36], [525.04, 337.84000000000003], [524.92, 336.32], [524.8, 334.8], [524.6800000000001, 333.28], [524.56, 331.76], [524.44, 330.24], [524.3199999999999, 328.72], [524.2, 327.2], [524.08, 325.68], [523.96, 324.15999999999997], [523.84, 322.64], [523.72, 321.12], [523.6, 319.6], [523.48, 318.08000000000004], [523.36, 316.56], [523.24, 315.03999999999996], [523.12, 313.52], [523.0, 312.0], [522.16, 311.12], [521.3199999999999, 310.24], [520.48, 309.36], [519.64, 308.48], [518.8, 307.6], [517.96, 306.72], [517.12, 305.84000000000003], [516.28, 304.96000000000004], [515.44, 304.08000000000004], [514.6, 303.2], [513.76, 302.32], [512.92, 301.44], [512.08, 300.56], [511.24, 299.68], [510.4, 298.8], [509.56, 297.91999999999996], [508.72, 297.03999999999996], [507.88, 296.15999999999997], [507.03999999999996, 295.28], [506.2, 294.4], [505.36, 293.52], [504.52, 292.64], [503.68, 291.76], [502.84000000000003, 290.88], [502.0, 290.0], [500.4, 289.84000000000003], [498.8, 289.68], [497.2, 289.52], [495.6, 289.36], [494.0, 289.2], [492.4, 289.03999999999996], [490.8, 288.88], [489.2, 288.72], [487.6, 288.56], [486.0, 288.4], [484.4, 288.24], [482.8, 288.08000000000004], [481.2, 287.91999999999996], [479.6, 287.76], [478.0, 287.6], [476.4, 287.44], [474.8, 287.28], [473.2, 287.12], [471.6, 286.96000000000004], [470.0, 286.8], [468.4, 286.64], [466.8, 286.48], [465.2, 286.32], [463.6, 286.15999999999997], [462.0, 286.0], [460.44, 286.52], [458.88, 287.03999999999996], [457.32, 287.56], [455.76, 288.08000000000004], [454.2, 288.6], [452.64, 289.12], [451.08000000000004, 289.64], [449.52, 290.15999999999997], [447.96000000000004, 290.68], [446.4, 291.2], [444.84000000000003, 291.72], [443.28, 292.24], [441.72, 292.76], [440.15999999999997, 293.28], [438.6, 293.8], [437.03999999999996, 294.32], [435.48, 294.84000000000003], [433.91999999999996, 295.36], [432.36, 295.88], [430.8, 296.4], [429.24, 296.91999999999996], [427.68, 297.44], [426.12, 297.96000000000004], [424.56, 298.48], [423.0, 299.0], [421.44, 299.03999999999996], [419.88, 299.08000000000004], [418.32, 299.12], [416.76, 299.15999999999997], [415.2, 299.2], [413.64, 299.24], [412.08, 299.28], [410.52, 299.32], [408.96000000000004, 299.36], [407.4, 299.4], [405.84000000000003, 299.44], [404.28, 299.48], [402.72, 299.52], [401.15999999999997, 299.56], [399.6, 299.6], [398.04, 299.64], [396.48, 299.68], [394.92, 299.72], [393.36, 299.76], [391.8, 299.8], [390.24, 299.84000000000003], [388.68, 299.88], [387.12, 299.91999999999996], [385.56, 299.96000000000004], [384.0, 300.0], [383.28, 298.72], [382.56, 297.44], [381.84000000000003, 296.15999999999997], [381.12, 294.88], [380.4, 293.6], [379.68, 292.32], [378.96, 291.03999999999996], [378.24, 289.76], [377.52, 288.48], [376.8, 287.2], [376.08, 285.91999999999996], [375.36, 284.64], [374.64, 283.36], [373.92, 282.08], [373.2, 280.8], [372.48, 279.52], [371.76, 278.24], [371.04, 276.96000000000004], [370.32, 275.68], [369.6, 274.4], [368.88, 273.12], [368.15999999999997, 271.84000000000003], [367.44, 270.56], [366.72, 269.28], [366.0, 268.0], [366.56, 266.6], [367.12, 265.2], [367.68, 263.8], [368.24, 262.4], [368.8, 261.0], [369.36, 259.6], [369.92, 258.2], [370.48, 256.8], [371.03999999999996, 255.4], [371.6, 254.0], [372.15999999999997, 252.6], [372.72, 251.2], [373.28, 249.8], [373.84000000000003, 248.4], [374.4, 247.0], [374.96, 245.6], [375.52, 244.2], [376.08, 242.8], [376.64, 241.4], [377.2, 240.0], [377.76, 238.6], [378.32, 237.2], [378.88, 235.8], [379.44, 234.4], [380.0, 233.0], [381.52, 232.44], [383.03999999999996, 231.88], [384.56, 231.32], [386.08, 230.76], [387.6, 230.2], [389.12, 229.64], [390.64, 229.08], [392.15999999999997, 228.52], [393.68, 227.95999999999998], [395.2, 227.4], [396.72, 226.84], [398.24, 226.28], [399.76, 225.72], [401.28, 225.16], [402.8, 224.6], [404.32, 224.04000000000002], [405.84000000000003, 223.48000000000002], [407.36, 222.92000000000002], [408.88, 222.36], [410.4, 221.8], [411.92, 221.24], [413.44, 220.68], [414.96, 220.12], [416.48, 219.56], [418.0, 219.0], [419.48, 219.12], [420.96000000000004, 219.24], [422.44, 219.36], [423.92, 219.48000000000002], [425.4, 219.6], [426.88, 219.72], [428.36, 219.84], [429.84000000000003, 219.95999999999998], [431.32, 220.07999999999998], [432.8, 220.2], [434.28, 220.32], [435.76, 220.44], [437.24, 220.56], [438.72, 220.68], [440.2, 220.8], [441.68, 220.92000000000002], [443.15999999999997, 221.04000000000002], [444.64, 221.16], [446.12, 221.28], [447.6, 221.4], [449.08000000000004, 221.51999999999998], [450.56, 221.64], [452.03999999999996, 221.76], [453.52, 221.88], [455.0, 222.0], [456.52, 222.04000000000002], [458.03999999999996, 222.07999999999998], [459.56, 222.12], [461.08, 222.16], [462.6, 222.2], [464.12, 222.24], [465.64, 222.28], [467.15999999999997, 222.32], [468.68, 222.36], [470.2, 222.4], [471.72, 222.44], [473.24, 222.48000000000002], [474.76, 222.51999999999998], [476.28, 222.56], [477.8, 222.6], [479.32, 222.64], [480.84000000000003, 222.68], [482.36, 222.72], [483.88, 222.76], [485.4, 222.8], [486.91999999999996, 222.84], [488.44, 222.88], [489.96000000000004, 222.92000000000002], [491.48, 222.95999999999998], [493.0, 223.0], [494.12, 222.16], [495.24, 221.32], [496.36, 220.48000000000002], [497.48, 219.64], [498.6, 218.8], [499.72, 217.96], [500.84000000000003, 217.12], [501.96000000000004, 216.28], [503.08, 215.44], [504.2, 214.6], [505.32, 213.76], [506.44, 212.92000000000002], [507.56, 212.07999999999998], [508.68, 211.24], [509.8, 210.4], [510.91999999999996, 209.56], [512.04, 208.72], [513.16, 207.88], [514.28, 207.04000000000002], [515.4, 206.2], [516.52, 205.36], [517.64, 204.51999999999998], [518.76, 203.68], [519.88, 202.84], [521.0, 202.0], [521.84, 200.56], [522.6800000000001, 199.12], [523.52, 197.68], [524.36, 196.24], [525.2, 194.8], [526.04, 193.36], [526.88, 191.92000000000002], [527.72, 190.48], [528.56, 189.04], [529.4, 187.6], [530.24, 186.16], [531.08, 184.72], [531.92, 183.28], [532.76, 181.84], [533.6, 180.4], [534.44, 178.95999999999998], [535.28, 177.51999999999998], [536.12, 176.07999999999998], [536.96, 174.64], [537.8, 173.2], [538.64, 171.76], [539.48, 170.32], [540.3199999999999, 168.88], [541.16, 167.44], [542.0, 166.0]];
	}
	
	
	display() {
		for (var i = this.length - 1; i >= 0; i-=25) {
			var current = this.past[i];
			fill("#FF25A1");
			//ellipse(current[0], current[1], 10, 10);
			//console.log("(" + 
		}
		
		for (var j = this.length - 1; j >= 24; j--) {
			//point(this.past[j][0], this.past[j][1]);
		}
		
		this.drawBody();
	}
	
	drawBody() {
		var sideNodes = [];
		var jump = 50;
		var last_x1, last_y1, last_x2, last_y2;
		var doneOne = false;
		
		this.drawFrame();
		
		for (var i = this.length - 25; i >= 17; i -= jump) {
			var node1_x, node1_y, node2_x, node2_y;
			var x1, y1, x2, y2;
			var counterslope, degrees, currentX, currentY;
			
			x1 = this.past[i - round(jump * 0.46)][0];
			y1 = this.past[i - round(jump * 0.46)][1];
			x2 = this.past[i + round(jump * 0.46)][0];
			y2 = this.past[i + round(jump * 0.46)][1];
			counterslope = -(x1-x2)/(y1-y2);
			degrees = Math.atan(counterslope);
			currentX = this.past[i][0];
			currentY = this.past[i][1];
			
			node1_x = currentX - 25*Math.cos(degrees) * (i / 529);
			node1_y = currentY - 25*Math.sin(degrees) * (i / 529);
			node2_x = currentX + 25*Math.cos(degrees) * (i / 529);
			node2_y = currentY + 25*Math.sin(degrees) * (i / 529);
			fill("#8A0068");
			quad(node1_x, node1_y, x1, y1, node2_x, node2_y, x2, y2);
			
			if (doneOne) {
				fill("#CF0087");
				if ((node1_y > last_y1) == (node2_y > last_y2)) {
					triangle(last_x1, last_y1, node1_x, node1_y, x2, y2);
					triangle(last_x2, last_y2, node2_x, node2_y, x2, y2);
				} else {
					node1_x = currentX + 25*Math.cos(degrees) * (i / 529);
					node1_y = currentY + 25*Math.sin(degrees) * (i / 529);
					node2_x = currentX - 25*Math.cos(degrees) * (i / 529);
					node2_y = currentY - 25*Math.sin(degrees) * (i / 529);
					triangle(last_x1, last_y1, node1_x, node1_y, x2, y2);
					triangle(last_x2, last_y2, node2_x, node2_y, x2, y2);
				}
			} else { doneOne = true; }
			last_x1 = node1_x;
			last_y1 = node1_y;
			last_x2 = node2_x;
			last_y2 = node2_y;
			
			x1 = this.past[i - round(jump * 0.45)][0];
			y1 = this.past[i - round(jump * 0.45)][1];
			x2 = this.past[i + round(jump * 0.45)][0];
			y2 = this.past[i + round(jump * 0.45)][1];
			counterslope = -(x1-x2)/(y1-y2);
			degrees = Math.atan(counterslope);
			currentX = this.past[i][0];
			currentY = this.past[i][1];
			
			node1_x = currentX - 15*Math.cos(degrees) * (i / 529);
			node1_y = currentY - 15*Math.sin(degrees) * (i / 529);
			node2_x = currentX + 15*Math.cos(degrees) * (i / 529);
			node2_y = currentY + 15*Math.sin(degrees) * (i / 529);
			fill("#FF25A1");
			quad(node1_x, node1_y, x1, y1, node2_x, node2_y, x2, y2);
			
			node1_x = currentX - 8*Math.cos(degrees) * (i / 529);
			node1_y = currentY - 8*Math.sin(degrees) * (i / 529);
			node2_x = currentX + 8*Math.cos(degrees) * (i / 529);
			node2_y = currentY + 8*Math.sin(degrees) * (i / 529);
			fill("#FDD198");
			quad(node1_x, node1_y, x1, y1, node2_x, node2_y, x2, y2);
			//console.log(i);
			jump -= 2;
		}
		
		//console.log("---------------------------");
		this.drawHead();
	}
	
	drawFrame() {
		var x1 = this.past[574][0];
		var y1 = this.past[574][1];
		var x2 = this.past[569][0];
		var y2 = this.past[569][1];
		var slope = Math.atan(-(x2 - x1)/(y2 - y1)) - Math.PI / 2;
		if (y2 > y1) {
			var turtleNeckX1 = x1 + Math.cos(slope - PI/7)*20;
			var turtleNeckY1 = y1 + Math.sin(slope - PI/7)*20;
			var turtleNeckX2 = x1 + Math.cos(slope + PI/6)*30;
			var turtleNeckY2 = y1 + Math.sin(slope + PI/6)*30;
		} else {
			var turtleNeckX1 = x1 - Math.cos(slope - PI/7)*20;
			var turtleNeckY1 = y1 - Math.sin(slope - PI/7)*20;
			var turtleNeckX2 = x1 - Math.cos(slope + PI/6)*30;
			var turtleNeckY2 = y1 - Math.sin(slope + PI/6)*30;
		}
		var pointB = this.pointOff(550, 25);
		var pointC = this.pointOff(550, -25);
		
		triangle(turtleNeckX1, turtleNeckY1, pointB[0], pointB[1], this.past[574][0], this.past[574][1]);
		triangle(turtleNeckX2, turtleNeckY2, pointC[0], pointC[1], this.past[574][0], this.past[574][1]);
	}
	
	addPoint(x, y) {
		if (dist(mouseX, mouseY, this.past[574][0], this.past[574][1]) < 100 && tracking) {
			this.past.push([x, y]);
			this.past.shift();
		}
	}
	
	addLine(x, y) {
		var pastX = this.past[this.length - 1][0];
		var pastY = this.past[this.length - 1][1];
		var dx = x - pastX;
		var dy = y - pastY;
		var distance = Math.round(Math.sqrt(dy*dy + dx*dx));
		var slope = dy / dx;
		
		if (dx > 0) {
			for (var i = 0; i < dx; i += (dx / distance)) {
				this.addPoint(i + pastX, slope * i + pastY);
			}
		} else {
			for (var i = 0; i > dx; i += (dx / distance)) {
				this.addPoint(i + pastX, slope * i + pastY);
			}
		}
	}
	
	drawHead() {
		noStroke();
		// this is literally the most painful thing i have ever done
		var startX = this.past[574][0];
		var startY = this.past[574][1];
		var dx = startX - this.past[534][0];
		var dy = startY - this.past[534][1];
		var reference = Math.atan(dy / dx) * 180 / Math.PI;;
		if (dx < 0) {
			reference = 180+reference;
		}

		// left side
		var a = this.branch([startX, startY], 30, -54, reference);
		var b = this.branch(a, 18.75, -24, reference);
		var c = this.branch(a, 20.25, 36, reference);
		var d = this.branch(c, 18.375, 139, reference);
		var e = this.branch([startX, startY], 22.875, 0, reference);
		var f = this.branch(e, 61.125, 0, reference);
		var g = this.branch(c, 25.125, 30, reference);
		var h = this.branch(b, 19.875, 47, reference);
		var i = this.branch(h, 15.75, 160, reference);
		var j = this.branch(b, 45, 20, reference);
		var k = this.branch(j, 28.875, 181.5, reference);
		var l = this.branch(h, 39.75, 26, reference);
		line(f[0], f[1], j[0], j[1]);

		fill('#FE9F4F');
		quad(startX, startY, a[0], a[1], c[0], c[1], e[0], e[1]);
		fill('#FDBC77');
		quad(a[0], a[1], b[0], b[1], h[0], h[1], c[0], c[1]);
		fill('#FE9F4F');
		triangle(b[0], b[1], j[0], j[1], h[0], h[1]);
		fill('#FDBC77');
		triangle(h[0], h[1], j[0], j[1], f[0], f[1]);
		fill('#FE9F4F');
		quad(f[0], f[1], h[0], h[1], c[0], c[1], g[0], g[1]);
		fill('#FDD198');
		triangle(e[0], e[1], g[0], g[1], c[0], c[1]);

		// right side
		a = this.branch([startX, startY], 30, 54, reference);
		b = this.branch(a, 18.75, 24, reference);
		c = this.branch(a, 20.25, -36, reference);
		d = this.branch(c, 18.375, -139, reference);
		e = this.branch([startX, startY], 22.875, 0, reference);
		f = this.branch(e, 61.125, 0, reference);
		g = this.branch(c, 25.125, -30, reference);
		h = this.branch(b, 19.875, -47, reference);
		i = this.branch(h, 15.75, -160, reference);
		j = this.branch(b, 45, -20, reference);
		k = this.branch(j, 28.875, -181.5, reference);
		l = this.branch(h, 39.75, -26, reference);
		line(f[0], f[1], j[0], j[1]);

		fill('#FE9F4F');
		quad(a[0], a[1], b[0], b[1], h[0], h[1], c[0], c[1]);
		fill('#FDBC77');
		quad(startX, startY, a[0], a[1], c[0], c[1], e[0], e[1]);
		fill('#FE9F4F');
		triangle(h[0], h[1], j[0], j[1], f[0], f[1]);
		fill('#FDBC77');
		triangle(b[0], b[1], j[0], j[1], h[0], h[1]);
		fill('#FDBC77');
		quad(f[0], f[1], h[0], h[1], c[0], c[1], g[0], g[1]);
		fill('#FDE0B5');
		triangle(e[0], e[1], g[0], g[1], c[0], c[1]);

		// the tongue
		var tip = this.branch(f, 10, 0, reference);
		var leftSide = this.branch(tip, 15, -150, reference);
		var rightSide = this.branch(tip, 15, 150, reference);
		fill('#EA9AB0');
		triangle(f[0], f[1], tip[0], tip[1], rightSide[0], rightSide[1]);
		fill('#FE6096');
		triangle(f[0], f[1], tip[0], tip[1], leftSide[0], leftSide[1]);
	}
	
	pointOff(index, dist) {
		var x1 = this.past[index - 10][0];
		var y1 = this.past[index - 10][1];
		var x2 = this.past[index + 10][0];
		var y2 = this.past[index + 10][1];
		var angle = Math.atan(-(x2 - x1)/(y2 - y1));
		
		if (y2 > y1) {
			return [this.past[index][0] + Math.cos(angle) * dist, this.past[index][1] + Math.sin(angle) * dist];
		} else {
			return [this.past[index][0] - Math.cos(angle) * dist, this.past[index][1] - Math.sin(angle) * dist];
		}
	}
	
	branch(point, length, angle, reference) {
		var x = point[0];
		var y = point[1];
		angle += reference;
		line(x, y, x + length*this.cosine(angle), y + length*this.sine(angle));
		return [x + length*this.cosine(angle), y + length*this.sine(angle)];
	}
	
	cosine(n) {
		return Math.cos(n * PI / 180);
	}

	sine(n) {
		return Math.sin(n * PI / 180);
	}
	
}
