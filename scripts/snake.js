var past = [];
var tracking = false;
var snake;

var img;

function setup() {
	let canvas = createCanvas(1000, 510);
	canvas.parent("animation");
	fill(0);
	
	snake = new Snake();
}

function draw() {
	background(0);
	snake.display();
}

function mouseMoved() {
	snake.addLine(mouseX, mouseY);
}

function mouseClicked() {
	tracking = !tracking;
}

function print2DArray(a) {
	var out = "[";
	
	for (var i = 0; i < a.length; i++) {
		out += "[" + a[i][0] + ", " + a[i][1] + "], ";
	}
	
	console.log(out + "]");
}

class Snake {
	
	constructor() {
		this.length = 575;
		// sets the snake's default position, as generated by https://openprocessing.org/sketch/1420547 and some python
		this.past = [[429.15999999999997, 531.0], [428.32, 531.0], [427.48, 531.0], [426.64, 531.0], [425.8, 531.0], [424.96, 531.0], [424.12, 531.0], [423.28, 531.0], [422.44, 531.0], [421.6, 531.0], [420.76, 531.0], [419.92, 531.0], [419.08, 531.0], [418.24, 531.0], [417.4, 531.0], [416.56, 531.0], [415.72, 531.0], [414.88, 531.0], [414.04, 531.0], [413.2, 531.0], [412.36, 531.0], [411.52, 531.0], [410.68, 531.0], [409.84000000000003, 531.0], [409.0, 531.0], [408.15999999999997, 530.2], [407.32, 529.4], [406.48, 528.6], [405.64, 527.8], [404.8, 527.0], [403.96, 526.2], [403.12, 525.4], [402.28, 524.6], [401.44, 523.8], [400.6, 523.0], [399.76, 522.2], [398.92, 521.4], [398.08, 520.6], [397.24, 519.8], [396.4, 519.0], [395.56, 518.2], [394.72, 517.4], [393.88, 516.6], [393.04, 515.8], [392.2, 515.0], [391.36, 514.2], [390.52, 513.4], [389.68, 512.6], [388.84000000000003, 511.79999999999995], [388.0, 511.0], [389.12, 510.20000000000005], [390.24, 509.4], [391.36, 508.6], [392.48, 507.79999999999995], [393.6, 507.0], [394.72, 506.20000000000005], [395.84, 505.4], [396.96, 504.6], [398.08, 503.8], [399.2, 503.0], [400.32, 502.2], [401.44, 501.4], [402.56, 500.6], [403.68, 499.8], [404.8, 499.0], [405.92, 498.2], [407.03999999999996, 497.4], [408.15999999999997, 496.6], [409.28, 495.8], [410.4, 495.0], [411.52, 494.2], [412.64, 493.4], [413.76, 492.6], [414.88, 491.8], [416.0, 491.0], [416.72, 489.8], [417.44, 488.6], [418.15999999999997, 487.4], [418.88, 486.2], [419.6, 485.0], [420.32, 483.8], [421.04, 482.6], [421.76, 481.4], [422.48, 480.2], [423.2, 479.0], [423.92, 477.8], [424.64, 476.6], [425.36, 475.4], [426.08, 474.2], [426.8, 473.0], [427.52, 471.8], [428.24, 470.6], [428.96, 469.4], [429.68, 468.2], [430.4, 467.0], [431.12, 465.8], [431.84000000000003, 464.6], [432.56, 463.4], [433.28, 462.2], [434.0, 461.0], [433.28, 460.0], [432.56, 459.0], [431.84000000000003, 458.0], [431.12, 457.0], [430.4, 456.0], [429.68, 455.0], [428.96, 454.0], [428.24, 453.0], [427.52, 452.0], [426.8, 451.0], [426.08, 450.0], [425.36, 449.0], [424.64, 448.0], [423.92, 447.0], [423.2, 446.0], [422.48, 445.0], [421.76, 444.0], [421.04, 443.0], [420.32, 442.0], [419.6, 441.0], [418.88, 440.0], [418.15999999999997, 439.0], [417.44, 438.0], [416.72, 437.0], [416.0, 436.0], [414.8, 435.12], [413.6, 434.24], [412.4, 433.36], [411.2, 432.48], [410.0, 431.6], [408.8, 430.72], [407.6, 429.84], [406.4, 428.96], [405.2, 428.08], [404.0, 427.2], [402.8, 426.32], [401.6, 425.44], [400.4, 424.56], [399.2, 423.68], [398.0, 422.8], [396.8, 421.92], [395.6, 421.04], [394.4, 420.16], [393.2, 419.28], [392.0, 418.4], [390.8, 417.52], [389.6, 416.64], [388.4, 415.76], [387.2, 414.88], [386.0, 414.0], [386.24, 412.48], [386.48, 410.96], [386.72, 409.44], [386.96, 407.92], [387.2, 406.4], [387.44, 404.88], [387.68, 403.36], [387.92, 401.84], [388.15999999999997, 400.32], [388.4, 398.8], [388.64, 397.28], [388.88, 395.76], [389.12, 394.24], [389.36, 392.72], [389.6, 391.2], [389.84000000000003, 389.68], [390.08, 388.16], [390.32, 386.64], [390.56, 385.12], [390.8, 383.6], [391.04, 382.08], [391.28, 380.56], [391.52, 379.04], [391.76, 377.52], [392.0, 376.0], [393.48, 375.28], [394.96, 374.56], [396.44, 373.84], [397.92, 373.12], [399.4, 372.4], [400.88, 371.68], [402.36, 370.96], [403.84000000000003, 370.24], [405.32, 369.52], [406.8, 368.8], [408.28, 368.08], [409.76, 367.36], [411.24, 366.64], [412.72, 365.92], [414.2, 365.2], [415.68, 364.48], [417.15999999999997, 363.76], [418.64, 363.04], [420.12, 362.32], [421.6, 361.6], [423.08, 360.88], [424.56, 360.16], [426.04, 359.44], [427.52, 358.72], [429.0, 358.0], [430.88, 357.96], [432.76, 357.92], [434.64, 357.88], [436.52, 357.84], [438.4, 357.8], [440.28, 357.76], [442.15999999999997, 357.72], [444.04, 357.68], [445.92, 357.64], [447.8, 357.6], [449.68, 357.56], [451.56, 357.52], [453.44, 357.48], [455.32, 357.44], [457.2, 357.4], [459.08, 357.36], [460.96000000000004, 357.32], [462.84000000000003, 357.28], [464.72, 357.24], [466.6, 357.2], [468.48, 357.16], [470.36, 357.12], [472.24, 357.08], [474.12, 357.04], [476.0, 357.0], [477.68, 357.24], [479.36, 357.48], [481.03999999999996, 357.72], [482.72, 357.96], [484.4, 358.2], [486.08000000000004, 358.44], [487.76, 358.68], [489.44, 358.92], [491.12, 359.16], [492.8, 359.4], [494.48, 359.64], [496.15999999999997, 359.88], [497.84000000000003, 360.12], [499.52, 360.36], [501.2, 360.6], [502.88, 360.84], [504.56, 361.08], [506.24, 361.32], [507.91999999999996, 361.56], [509.6, 361.8], [511.28, 362.04], [512.96, 362.28], [514.64, 362.52], [516.3199999999999, 362.76], [518.0, 363.0], [519.72, 362.2], [521.44, 361.4], [523.16, 360.6], [524.88, 359.8], [526.6, 359.0], [528.3199999999999, 358.2], [530.04, 357.4], [531.76, 356.6], [533.48, 355.8], [535.2, 355.0], [536.9200000000001, 354.2], [538.64, 353.4], [540.36, 352.6], [542.08, 351.8], [543.8, 351.0], [545.52, 350.2], [547.24, 349.4], [548.96, 348.6], [550.6800000000001, 347.8], [552.4, 347.0], [554.12, 346.2], [555.84, 345.4], [557.56, 344.6], [559.28, 343.8], [561.0, 343.0], [560.88, 341.48], [560.76, 339.96], [560.64, 338.44], [560.52, 336.91999999999996], [560.4, 335.4], [560.28, 333.88], [560.16, 332.36], [560.04, 330.84000000000003], [559.92, 329.32], [559.8, 327.8], [559.6800000000001, 326.28], [559.56, 324.76], [559.44, 323.24], [559.3199999999999, 321.72], [559.2, 320.2], [559.08, 318.68], [558.96, 317.15999999999997], [558.84, 315.64], [558.72, 314.12], [558.6, 312.6], [558.48, 311.08000000000004], [558.36, 309.56], [558.24, 308.03999999999996], [558.12, 306.52], [558.0, 305.0], [557.16, 304.12], [556.3199999999999, 303.24], [555.48, 302.36], [554.64, 301.48], [553.8, 300.6], [552.96, 299.72], [552.12, 298.84000000000003], [551.28, 297.96000000000004], [550.44, 297.08000000000004], [549.6, 296.2], [548.76, 295.32], [547.92, 294.44], [547.08, 293.56], [546.24, 292.68], [545.4, 291.8], [544.56, 290.91999999999996], [543.72, 290.03999999999996], [542.88, 289.15999999999997], [542.04, 288.28], [541.2, 287.4], [540.36, 286.52], [539.52, 285.64], [538.6800000000001, 284.76], [537.84, 283.88], [537.0, 283.0], [535.4, 282.84000000000003], [533.8, 282.68], [532.2, 282.52], [530.6, 282.36], [529.0, 282.2], [527.4, 282.03999999999996], [525.8, 281.88], [524.2, 281.72], [522.6, 281.56], [521.0, 281.4], [519.4, 281.24], [517.8, 281.08000000000004], [516.2, 280.91999999999996], [514.6, 280.76], [513.0, 280.6], [511.4, 280.44], [509.8, 280.28], [508.2, 280.12], [506.6, 279.96000000000004], [505.0, 279.8], [503.4, 279.64], [501.8, 279.48], [500.2, 279.32], [498.6, 279.15999999999997], [497.0, 279.0], [495.44, 279.52], [493.88, 280.03999999999996], [492.32, 280.56], [490.76, 281.08000000000004], [489.2, 281.6], [487.64, 282.12], [486.08000000000004, 282.64], [484.52, 283.15999999999997], [482.96000000000004, 283.68], [481.4, 284.2], [479.84000000000003, 284.72], [478.28, 285.24], [476.72, 285.76], [475.15999999999997, 286.28], [473.6, 286.8], [472.03999999999996, 287.32], [470.48, 287.84000000000003], [468.91999999999996, 288.36], [467.36, 288.88], [465.8, 289.4], [464.24, 289.91999999999996], [462.68, 290.44], [461.12, 290.96000000000004], [459.56, 291.48], [458.0, 292.0], [456.44, 292.03999999999996], [454.88, 292.08000000000004], [453.32, 292.12], [451.76, 292.15999999999997], [450.2, 292.2], [448.64, 292.24], [447.08, 292.28], [445.52, 292.32], [443.96000000000004, 292.36], [442.4, 292.4], [440.84000000000003, 292.44], [439.28, 292.48], [437.72, 292.52], [436.15999999999997, 292.56], [434.6, 292.6], [433.04, 292.64], [431.48, 292.68], [429.92, 292.72], [428.36, 292.76], [426.8, 292.8], [425.24, 292.84000000000003], [423.68, 292.88], [422.12, 292.91999999999996], [420.56, 292.96000000000004], [419.0, 293.0], [418.28, 291.72], [417.56, 290.44], [416.84000000000003, 289.15999999999997], [416.12, 287.88], [415.4, 286.6], [414.68, 285.32], [413.96, 284.03999999999996], [413.24, 282.76], [412.52, 281.48], [411.8, 280.2], [411.08, 278.91999999999996], [410.36, 277.64], [409.64, 276.36], [408.92, 275.08], [408.2, 273.8], [407.48, 272.52], [406.76, 271.24], [406.04, 269.96000000000004], [405.32, 268.68], [404.6, 267.4], [403.88, 266.12], [403.15999999999997, 264.84000000000003], [402.44, 263.56], [401.72, 262.28], [401.0, 261.0], [401.56, 259.6], [402.12, 258.2], [402.68, 256.8], [403.24, 255.39999999999998], [403.8, 254.0], [404.36, 252.60000000000002], [404.92, 251.2], [405.48, 249.8], [406.03999999999996, 248.4], [406.6, 247.0], [407.15999999999997, 245.6], [407.72, 244.2], [408.28, 242.8], [408.84000000000003, 241.4], [409.4, 240.0], [409.96, 238.6], [410.52, 237.2], [411.08, 235.8], [411.64, 234.4], [412.2, 233.0], [412.76, 231.6], [413.32, 230.2], [413.88, 228.8], [414.44, 227.4], [415.0, 226.0], [416.52, 225.44], [418.03999999999996, 224.88], [419.56, 224.32], [421.08, 223.76], [422.6, 223.2], [424.12, 222.64], [425.64, 222.08], [427.15999999999997, 221.52], [428.68, 220.95999999999998], [430.2, 220.4], [431.72, 219.84], [433.24, 219.28], [434.76, 218.72], [436.28, 218.16], [437.8, 217.6], [439.32, 217.04000000000002], [440.84000000000003, 216.48000000000002], [442.36, 215.92000000000002], [443.88, 215.36], [445.4, 214.8], [446.92, 214.24], [448.44, 213.68], [449.96, 213.12], [451.48, 212.56], [453.0, 212.0], [454.48, 212.12], [455.96000000000004, 212.24], [457.44, 212.36], [458.92, 212.48000000000002], [460.4, 212.6], [461.88, 212.72], [463.36, 212.84], [464.84000000000003, 212.95999999999998], [466.32, 213.07999999999998], [467.8, 213.2], [469.28, 213.32], [470.76, 213.44], [472.24, 213.56], [473.72, 213.68], [475.2, 213.8], [476.68, 213.92000000000002], [478.15999999999997, 214.04000000000002], [479.64, 214.16], [481.12, 214.28], [482.6, 214.4], [484.08000000000004, 214.51999999999998], [485.56, 214.64], [487.03999999999996, 214.76], [488.52, 214.88], [490.0, 215.0], [491.52, 215.04000000000002], [493.03999999999996, 215.07999999999998], [494.56, 215.12], [496.08, 215.16], [497.6, 215.2], [499.12, 215.24], [500.64, 215.28], [502.15999999999997, 215.32], [503.68, 215.36], [505.2, 215.4], [506.72, 215.44], [508.24, 215.48000000000002], [509.76, 215.51999999999998], [511.28, 215.56], [512.8, 215.6], [514.3199999999999, 215.64], [515.84, 215.68], [517.36, 215.72], [518.88, 215.76], [520.4, 215.8], [521.92, 215.84], [523.44, 215.88], [524.96, 215.92000000000002], [526.48, 215.95999999999998], [528.0, 216.0], [529.12, 215.16], [530.24, 214.32], [531.36, 213.48000000000002], [532.48, 212.64], [533.6, 211.8], [534.72, 210.96], [535.84, 210.12], [536.96, 209.28], [538.0799999999999, 208.44], [539.2, 207.6], [540.3199999999999, 206.76], [541.44, 205.92000000000002], [542.56, 205.07999999999998], [543.6800000000001, 204.24], [544.8, 203.4], [545.92, 202.56], [547.04, 201.72], [548.16, 200.88], [549.28, 200.04000000000002], [550.4, 199.2], [551.52, 198.36], [552.64, 197.51999999999998], [553.76, 196.68], [554.88, 195.84], [556.0, 195.0], [556.84, 193.56], [557.6800000000001, 192.12], [558.52, 190.68], [559.36, 189.24], [560.2, 187.8], [561.04, 186.36], [561.88, 184.92000000000002], [562.72, 183.48], [563.56, 182.04], [564.4, 180.6], [565.24, 179.16], [566.08, 177.72], [566.92, 176.28], [567.76, 174.84], [568.6, 173.4], [569.44, 171.95999999999998], [570.28, 170.51999999999998], [571.12, 169.07999999999998], [571.96, 167.64], [572.8, 166.2], [573.64, 164.76], [574.48, 163.32], [575.3199999999999, 161.88], [576.16, 160.44], [577.0, 159.0]];
	}
	
	
	display() {
		for (var i = this.length - 1; i >= 0; i-=25) {
			var current = this.past[i];
			fill("#FF25A1");
			//ellipse(current[0], current[1], 10, 10);
			//console.log("(" + 
		}
		
		for (var j = this.length - 1; j >= 24; j--) {
			//point(this.past[j][0], this.past[j][1]);
		}
		
		this.drawBody();
	}
	
	drawBody() {
		var sideNodes = [];
		var jump = 50;
		var last_x1, last_y1, last_x2, last_y2;
		var doneOne = false;
		
		this.drawFrame();
		
		for (var i = this.length - 25; i >= 17; i -= jump) {
			var node1_x, node1_y, node2_x, node2_y;
			var x1, y1, x2, y2;
			var counterslope, degrees, currentX, currentY;
			
			x1 = this.past[i - round(jump * 0.46)][0];
			y1 = this.past[i - round(jump * 0.46)][1];
			x2 = this.past[i + round(jump * 0.46)][0];
			y2 = this.past[i + round(jump * 0.46)][1];
			counterslope = -(x1-x2)/(y1-y2);
			degrees = Math.atan(counterslope);
			currentX = this.past[i][0];
			currentY = this.past[i][1];
			
			node1_x = currentX - 25*Math.cos(degrees) * (i / 529);
			node1_y = currentY - 25*Math.sin(degrees) * (i / 529);
			node2_x = currentX + 25*Math.cos(degrees) * (i / 529);
			node2_y = currentY + 25*Math.sin(degrees) * (i / 529);
			fill("#8A0068");
			quad(node1_x, node1_y, x1, y1, node2_x, node2_y, x2, y2);
			
			if (doneOne) {
				fill("#CF0087");
				if ((node1_y > last_y1) == (node2_y > last_y2)) {
					triangle(last_x1, last_y1, node1_x, node1_y, x2, y2);
					triangle(last_x2, last_y2, node2_x, node2_y, x2, y2);
				} else {
					node1_x = currentX + 25*Math.cos(degrees) * (i / 529);
					node1_y = currentY + 25*Math.sin(degrees) * (i / 529);
					node2_x = currentX - 25*Math.cos(degrees) * (i / 529);
					node2_y = currentY - 25*Math.sin(degrees) * (i / 529);
					triangle(last_x1, last_y1, node1_x, node1_y, x2, y2);
					triangle(last_x2, last_y2, node2_x, node2_y, x2, y2);
				}
			} else { doneOne = true; }
			last_x1 = node1_x;
			last_y1 = node1_y;
			last_x2 = node2_x;
			last_y2 = node2_y;
			
			x1 = this.past[i - round(jump * 0.45)][0];
			y1 = this.past[i - round(jump * 0.45)][1];
			x2 = this.past[i + round(jump * 0.45)][0];
			y2 = this.past[i + round(jump * 0.45)][1];
			counterslope = -(x1-x2)/(y1-y2);
			degrees = Math.atan(counterslope);
			currentX = this.past[i][0];
			currentY = this.past[i][1];
			
			node1_x = currentX - 15*Math.cos(degrees) * (i / 529);
			node1_y = currentY - 15*Math.sin(degrees) * (i / 529);
			node2_x = currentX + 15*Math.cos(degrees) * (i / 529);
			node2_y = currentY + 15*Math.sin(degrees) * (i / 529);
			fill("#FF25A1");
			quad(node1_x, node1_y, x1, y1, node2_x, node2_y, x2, y2);
			
			node1_x = currentX - 8*Math.cos(degrees) * (i / 529);
			node1_y = currentY - 8*Math.sin(degrees) * (i / 529);
			node2_x = currentX + 8*Math.cos(degrees) * (i / 529);
			node2_y = currentY + 8*Math.sin(degrees) * (i / 529);
			fill("#FDD198");
			quad(node1_x, node1_y, x1, y1, node2_x, node2_y, x2, y2);
			//console.log(i);
			jump -= 2;
		}
		
		//console.log("---------------------------");
		this.drawHead();
	}
	
	drawFrame() {
		var x1 = this.past[574][0];
		var y1 = this.past[574][1];
		var x2 = this.past[569][0];
		var y2 = this.past[569][1];
		var slope = Math.atan(-(x2 - x1)/(y2 - y1)) - Math.PI / 2;
		if (y2 > y1) {
			var turtleNeckX1 = x1 + Math.cos(slope - PI/7)*20;
			var turtleNeckY1 = y1 + Math.sin(slope - PI/7)*20;
			var turtleNeckX2 = x1 + Math.cos(slope + PI/6)*30;
			var turtleNeckY2 = y1 + Math.sin(slope + PI/6)*30;
		} else {
			var turtleNeckX1 = x1 - Math.cos(slope - PI/7)*20;
			var turtleNeckY1 = y1 - Math.sin(slope - PI/7)*20;
			var turtleNeckX2 = x1 - Math.cos(slope + PI/6)*30;
			var turtleNeckY2 = y1 - Math.sin(slope + PI/6)*30;
		}
		var pointB = this.pointOff(550, 25);
		var pointC = this.pointOff(550, -25);
		
		triangle(turtleNeckX1, turtleNeckY1, pointB[0], pointB[1], this.past[574][0], this.past[574][1]);
		triangle(turtleNeckX2, turtleNeckY2, pointC[0], pointC[1], this.past[574][0], this.past[574][1]);
	}
	
	addPoint(x, y) {
		if (dist(mouseX, mouseY, this.past[574][0], this.past[574][1]) < 100 && tracking) {
			this.past.push([x, y]);
			this.past.shift();
		}
	}
	
	addLine(x, y) {
		var pastX = this.past[this.length - 1][0];
		var pastY = this.past[this.length - 1][1];
		var dx = x - pastX;
		var dy = y - pastY;
		var distance = Math.round(Math.sqrt(dy*dy + dx*dx));
		var slope = dy / dx;
		
		if (dx > 0) {
			for (var i = 0; i < dx; i += (dx / distance)) {
				this.addPoint(i + pastX, slope * i + pastY);
			}
		} else {
			for (var i = 0; i > dx; i += (dx / distance)) {
				this.addPoint(i + pastX, slope * i + pastY);
			}
		}
	}
	
	drawHead() {
		noStroke();
		// this is literally the most painful thing i have ever done
		var startX = this.past[574][0];
		var startY = this.past[574][1];
		var dx = startX - this.past[534][0];
		var dy = startY - this.past[534][1];
		var reference = Math.atan(dy / dx) * 180 / Math.PI;;
		if (dx < 0) {
			reference = 180+reference;
		}

		// left side
		var a = this.branch([startX, startY], 30, -54, reference);
		var b = this.branch(a, 18.75, -24, reference);
		var c = this.branch(a, 20.25, 36, reference);
		var d = this.branch(c, 18.375, 139, reference);
		var e = this.branch([startX, startY], 22.875, 0, reference);
		var f = this.branch(e, 61.125, 0, reference);
		var g = this.branch(c, 25.125, 30, reference);
		var h = this.branch(b, 19.875, 47, reference);
		var i = this.branch(h, 15.75, 160, reference);
		var j = this.branch(b, 45, 20, reference);
		var k = this.branch(j, 28.875, 181.5, reference);
		var l = this.branch(h, 39.75, 26, reference);
		line(f[0], f[1], j[0], j[1]);

		fill('#FE9F4F');
		quad(startX, startY, a[0], a[1], c[0], c[1], e[0], e[1]);
		fill('#FDBC77');
		quad(a[0], a[1], b[0], b[1], h[0], h[1], c[0], c[1]);
		fill('#FE9F4F');
		triangle(b[0], b[1], j[0], j[1], h[0], h[1]);
		fill('#FDBC77');
		triangle(h[0], h[1], j[0], j[1], f[0], f[1]);
		fill('#FE9F4F');
		quad(f[0], f[1], h[0], h[1], c[0], c[1], g[0], g[1]);
		fill('#FDD198');
		triangle(e[0], e[1], g[0], g[1], c[0], c[1]);

		// right side
		a = this.branch([startX, startY], 30, 54, reference);
		b = this.branch(a, 18.75, 24, reference);
		c = this.branch(a, 20.25, -36, reference);
		d = this.branch(c, 18.375, -139, reference);
		e = this.branch([startX, startY], 22.875, 0, reference);
		f = this.branch(e, 61.125, 0, reference);
		g = this.branch(c, 25.125, -30, reference);
		h = this.branch(b, 19.875, -47, reference);
		i = this.branch(h, 15.75, -160, reference);
		j = this.branch(b, 45, -20, reference);
		k = this.branch(j, 28.875, -181.5, reference);
		l = this.branch(h, 39.75, -26, reference);
		line(f[0], f[1], j[0], j[1]);

		fill('#FE9F4F');
		quad(a[0], a[1], b[0], b[1], h[0], h[1], c[0], c[1]);
		fill('#FDBC77');
		quad(startX, startY, a[0], a[1], c[0], c[1], e[0], e[1]);
		fill('#FE9F4F');
		triangle(h[0], h[1], j[0], j[1], f[0], f[1]);
		fill('#FDBC77');
		triangle(b[0], b[1], j[0], j[1], h[0], h[1]);
		fill('#FDBC77');
		quad(f[0], f[1], h[0], h[1], c[0], c[1], g[0], g[1]);
		fill('#FDE0B5');
		triangle(e[0], e[1], g[0], g[1], c[0], c[1]);

		// the tongue
		var tip = this.branch(f, 10, 0, reference);
		var leftSide = this.branch(tip, 15, -150, reference);
		var rightSide = this.branch(tip, 15, 150, reference);
		fill('#EA9AB0');
		triangle(f[0], f[1], tip[0], tip[1], rightSide[0], rightSide[1]);
		fill('#FE6096');
		triangle(f[0], f[1], tip[0], tip[1], leftSide[0], leftSide[1]);
	}
	
	pointOff(index, dist) {
		var x1 = this.past[index - 10][0];
		var y1 = this.past[index - 10][1];
		var x2 = this.past[index + 10][0];
		var y2 = this.past[index + 10][1];
		var angle = Math.atan(-(x2 - x1)/(y2 - y1));
		
		if (y2 > y1) {
			return [this.past[index][0] + Math.cos(angle) * dist, this.past[index][1] + Math.sin(angle) * dist];
		} else {
			return [this.past[index][0] - Math.cos(angle) * dist, this.past[index][1] - Math.sin(angle) * dist];
		}
	}
	
	branch(point, length, angle, reference) {
		var x = point[0];
		var y = point[1];
		angle += reference;
		line(x, y, x + length*this.cosine(angle), y + length*this.sine(angle));
		return [x + length*this.cosine(angle), y + length*this.sine(angle)];
	}
	
	cosine(n) {
		return Math.cos(n * PI / 180);
	}

	sine(n) {
		return Math.sin(n * PI / 180);
	}
	
}
